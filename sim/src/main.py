import logging
import socket
import time
import math

#All Data is little endian (smallest index of each field has LSB)
#Should be sent in this format: for i in CAN_Test_Data: return can.CANparse(bytearray(i[3::-1] + i[7:3:-1] + i[16:7:-1]), 1)
CAN_Test_Data = [
#   |         CAN ID       |          IDX          |                     DATA                      |
    [0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Dash Kill Switch On
    [0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #BPS Trip On
    [0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Any System Failure On
    [0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Ignition On
    [0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Any System Shutoff On
    [0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #BPS All Clear Enabled
    [0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #BPS Contactor State On
    [0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x03, 0x0F, 0x0F], #BPS Current
    [0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #BPS Voltage 3441mV
    [0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x94, 0x32], #BPS Temperature 37000ish
    [0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01], #SOC gibberish
    [0x00, 0x00, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #WDOG Triggered True
    [0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #CAN Error True
    #[0x109] - NOT USED
    [0x00, 0x00, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x75], #Supplemental Voltage 3441mV
    [0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Charging Enabled

    [0x00, 0x00, 0x05, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Car State On
    [0x00, 0x00, 0x02, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0A], #Motor Controller BUS
    [0x00, 0x00, 0x02, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20], #Velocity
    [0x00, 0x00, 0x02, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Motor Controller Phase Current
    [0x00, 0x00, 0x02, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Motor Voltage Vector
    [0x00, 0x00, 0x02, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Motor Current Vector
    [0x00, 0x00, 0x02, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Motor BackEMF
    [0x00, 0x00, 0x02, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Motor Temperature
    [0x00, 0x00, 0x02, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71, 0x00, 0x00, 0x0D, 0x71], #Odometer & Bus Amp Hours
    [0x00, 0x00, 0x02, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Array Contactor Enabled

    [0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x05], #Sunscatter A Array Voltage Setpoint
    [0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter A Array Voltage Measurement
    [0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter A Array Current Measurement
    [0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter A Battery Voltage Measurement
    [0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter A Battery Current Measurement
    [0x00, 0x00, 0x06, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Sunscatter A override enabled
    [0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Sunscatter A Fault Enabled
    [0x00, 0x00, 0x06, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter B Array Voltage Setpoint
    [0x00, 0x00, 0x06, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter B Array Voltage Measurement
    [0x00, 0x00, 0x06, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter B Array Current Measurement
    [0x00, 0x00, 0x06, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter B Battery Voltage Measurement
    [0x00, 0x00, 0x06, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x71], #Sunscatter B Battery Current Measurement
    [0x00, 0x00, 0x06, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01], #Sunscatter B override enabled
    [0x00, 0x00, 0x06, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01] #Sunscatter B fault enabled
]

#                          1         2         3         4         5
#                0123456789012345678901234567890123456789012345678901
GPS_Test_Data = "064951000A2307.1256N12016.4438E0.03165.482604063.05W"

IMU_Test_Data = [
    bytearray(b'\xf8\xfe\x01\x00\xbe\x03\x82\xfc\xaa\xfe\xcc\xfc\x00\x00\xfe\xff\x02\x00'),
    bytearray(b'\xf9\xfe\x00\x00\xbb\x03\x82\xfc\xaa\xfe\xcc\xfc\xfb\xff\xff\xff\x06\x00'),
    bytearray(b'\xfa\xfe\x01\x00\xbe\x03\x82\xfc\xaa\xfe\xcc\xfc\xf3\xff\xfa\xff\x0b\x00')
]

# the different componenes of GPS data, first element is idk, then lat big, lat small, N or S
# long big, long small, W or E, mph, unknown
GPS_Test_Data_array = ["064951000A", 2307, ".", 1256, "N", 12016, ".", 4438, "E", 0.03165, ".482604063.05W"]
start_time = time.time()

#this updates the velocity as a sin wave and then uses 
def update_GPS_data():
    GPS_Test_Data_array[9] = round(GPS_Test_Data_array[9] + math.sin((time.time() - start_time)/4) * 0.3, 5)
    GPS_Test_Data_array[1] = round(GPS_Test_Data_array[1] + GPS_Test_Data_array[9], 0)
    GPS_Test_Data_array[5] = round(GPS_Test_Data_array[5] + GPS_Test_Data_array[9], 0)
    GPS_Test_Data = ""
    for i in GPS_Test_Data_array:
        GPS_Test_Data += str(i)
    
def update_IMU_data():
    pass

def update_CAN_data():
    pass

def update_data():
    update_GPS_data()
    update_IMU_data()
    update_CAN_data()
    
def send_data(CAN, index, socket):
    socket.send(bytearray(CAN + index[3::-1] + index[7:3:-1] + index[16:7:-1]))
    
    
def send_bps_contactor_state(CAN, socket):
    #update bps contactor state
    send_data(CAN, CAN_Test_Data[6], socket)
    
def send_WDOG_triggered(CAN, socket):
    #update wdog
    send_data(CAN, CAN_Test_Data[10], socket)
    
def send_CAN_error(CAN, socket):
    #update can error
    send_data(CAN, CAN_Test_Data[11], socket)
    
# sends all 1hz data at the CAN index to the socket
def send_1hz_data(CAN, socket):
    send_bps_contactor_state(CAN, socket)
    send_WDOG_triggered(CAN, socket)
    send_CAN_error(CAN, socket)



def send_bps_trip(CAN, socket):
    #update bps trip
    send_data(CAN, CAN_Test_Data[1], socket)
    
def send_current(CAN, socket):
    #update current data
    send_data(CAN, CAN_Test_Data[7], socket)
    
def send_voltage(CAN, socket):
    #update voltage data
    send_data(CAN, CAN_Test_Data[8], socket)
    
def send_temperature(CAN, socket):
    #update temperature data
    send_data(CAN, CAN_Test_Data[9], socket)
    
def send_state_of_charge(CAN, socket):
    #update state of charge data
    send_data(CAN, CAN_Test_Data[10], socket)
    
def send_supplemental_voltage(CAN, socket):
    #udpat supplemental voltage
    send_data(CAN, CAN_Test_Data[12], socket)
    
def send_charging_enabled(CAN, socket):
    #update charging enabled
    send_data(CAN, CAN_Test_Data[13], socket)

# sends all 5hz data at the CAN index to the socket
def send_5hz_data(CAN, socket):
    send_bps_trip(CAN, socket)
    send_current(CAN, socket)
    send_voltage(CAN, socket)
    send_temperature(CAN, socket)
    send_state_of_charge(CAN, socket)
    send_supplemental_voltage(CAN, socket)
    send_charging_enabled(CAN, socket)



def send_bps_all_clear(CAN, socket):
    #update bps all clear
    send_data(CAN, CAN_Test_Data[5], socket)

# sends all 50hz data at the CAN index to the socket
def send_50hz_data(CAN, socket):
    send_bps_all_clear(CAN, socket)

HOST = 'app'
PORT = 65432

#This is the only function that should be called outside of this file. Other functions will be called within this function
def sender():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    logging.debug("Client starting...")
    s.setblocking(True)
    eth_header_CAN = [0x03, 0x10]
    eth_header_GPS = [0x02, len(GPS_Test_Data)]
    eth_header_IMU = [0x01, 0x12]
    
    hz1 = time.time_ns()
    hz5 = time.time_ns()
    hz50 = time.time_ns()
    nanosecond = 1000000000

    while True:
        cur_time = time.time_ns()
        
        if((cur_time - hz1) > nanosecond):
            hz1 = cur_time
            send_1hz_data(eth_header_CAN, s)
            logging.debug("CAN sent at 1hz.")
            
        if(cur_time - hz5 > 0.2*nanosecond):
            hz5 = cur_time
            send_5hz_data(eth_header_CAN, s)
            logging.debug("CAN sent at 5hz.")
            
        if(cur_time - hz50 > 0.02*nanosecond):
            hz50 = cur_time
            send_50hz_data(eth_header_CAN, s)
            logging.debug("CAN sent at 50hz.")
            

        # for i in CAN_Test_Data: 
        #     s.send(bytearray(eth_header_CAN + i[3::-1] + i[7:3:-1] + i[16:7:-1]) )
            
        
        s.sendall(bytearray(eth_header_GPS) + GPS_Test_Data.encode())
        #logging.debug("GPS sent.")
        for i in IMU_Test_Data:
            s.sendall(bytearray(eth_header_IMU) + i)
        #logging.debug("IMU sent.")
        # time.sleep(1)
        #logging.debug("\n")

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    HOST = 'localhost'
    PORT = 65432
    sender()
